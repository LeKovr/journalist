// Code generated by ent, DO NOT EDIT.

package feed

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/mrusme/journalist/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsername), v))
	})
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassword), v))
	})
}

// FeedTitle applies equality check predicate on the "feed_title" field. It's identical to FeedTitleEQ.
func FeedTitle(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedTitle), v))
	})
}

// FeedDescription applies equality check predicate on the "feed_description" field. It's identical to FeedDescriptionEQ.
func FeedDescription(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedDescription), v))
	})
}

// FeedLink applies equality check predicate on the "feed_link" field. It's identical to FeedLinkEQ.
func FeedLink(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedLink), v))
	})
}

// FeedFeedLink applies equality check predicate on the "feed_feed_link" field. It's identical to FeedFeedLinkEQ.
func FeedFeedLink(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedFeedLink), v))
	})
}

// FeedUpdated applies equality check predicate on the "feed_updated" field. It's identical to FeedUpdatedEQ.
func FeedUpdated(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedUpdated), v))
	})
}

// FeedPublished applies equality check predicate on the "feed_published" field. It's identical to FeedPublishedEQ.
func FeedPublished(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedPublished), v))
	})
}

// FeedAuthorName applies equality check predicate on the "feed_author_name" field. It's identical to FeedAuthorNameEQ.
func FeedAuthorName(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedAuthorName), v))
	})
}

// FeedAuthorEmail applies equality check predicate on the "feed_author_email" field. It's identical to FeedAuthorEmailEQ.
func FeedAuthorEmail(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedAuthorEmail), v))
	})
}

// FeedLanguage applies equality check predicate on the "feed_language" field. It's identical to FeedLanguageEQ.
func FeedLanguage(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedLanguage), v))
	})
}

// FeedImageTitle applies equality check predicate on the "feed_image_title" field. It's identical to FeedImageTitleEQ.
func FeedImageTitle(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedImageTitle), v))
	})
}

// FeedImageURL applies equality check predicate on the "feed_image_url" field. It's identical to FeedImageURLEQ.
func FeedImageURL(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedImageURL), v))
	})
}

// FeedCopyright applies equality check predicate on the "feed_copyright" field. It's identical to FeedCopyrightEQ.
func FeedCopyright(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedCopyright), v))
	})
}

// FeedGenerator applies equality check predicate on the "feed_generator" field. It's identical to FeedGeneratorEQ.
func FeedGenerator(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedGenerator), v))
	})
}

// FeedCategories applies equality check predicate on the "feed_categories" field. It's identical to FeedCategoriesEQ.
func FeedCategories(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedCategories), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldURL), v))
	})
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldURL), v...))
	})
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldURL), v...))
	})
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldURL), v))
	})
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldURL), v))
	})
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldURL), v))
	})
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldURL), v))
	})
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldURL), v))
	})
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldURL), v))
	})
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldURL), v))
	})
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldURL), v))
	})
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldURL), v))
	})
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsername), v))
	})
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUsername), v))
	})
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUsername), v...))
	})
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUsername), v...))
	})
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUsername), v))
	})
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUsername), v))
	})
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUsername), v))
	})
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUsername), v))
	})
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUsername), v))
	})
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUsername), v))
	})
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUsername), v))
	})
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUsername), v))
	})
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUsername), v))
	})
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassword), v))
	})
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPassword), v))
	})
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPassword), v...))
	})
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPassword), v...))
	})
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPassword), v))
	})
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPassword), v))
	})
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPassword), v))
	})
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPassword), v))
	})
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPassword), v))
	})
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPassword), v))
	})
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPassword), v))
	})
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPassword), v))
	})
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPassword), v))
	})
}

// FeedTitleEQ applies the EQ predicate on the "feed_title" field.
func FeedTitleEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedTitle), v))
	})
}

// FeedTitleNEQ applies the NEQ predicate on the "feed_title" field.
func FeedTitleNEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFeedTitle), v))
	})
}

// FeedTitleIn applies the In predicate on the "feed_title" field.
func FeedTitleIn(vs ...string) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFeedTitle), v...))
	})
}

// FeedTitleNotIn applies the NotIn predicate on the "feed_title" field.
func FeedTitleNotIn(vs ...string) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFeedTitle), v...))
	})
}

// FeedTitleGT applies the GT predicate on the "feed_title" field.
func FeedTitleGT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFeedTitle), v))
	})
}

// FeedTitleGTE applies the GTE predicate on the "feed_title" field.
func FeedTitleGTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFeedTitle), v))
	})
}

// FeedTitleLT applies the LT predicate on the "feed_title" field.
func FeedTitleLT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFeedTitle), v))
	})
}

// FeedTitleLTE applies the LTE predicate on the "feed_title" field.
func FeedTitleLTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFeedTitle), v))
	})
}

// FeedTitleContains applies the Contains predicate on the "feed_title" field.
func FeedTitleContains(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFeedTitle), v))
	})
}

// FeedTitleHasPrefix applies the HasPrefix predicate on the "feed_title" field.
func FeedTitleHasPrefix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFeedTitle), v))
	})
}

// FeedTitleHasSuffix applies the HasSuffix predicate on the "feed_title" field.
func FeedTitleHasSuffix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFeedTitle), v))
	})
}

// FeedTitleEqualFold applies the EqualFold predicate on the "feed_title" field.
func FeedTitleEqualFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFeedTitle), v))
	})
}

// FeedTitleContainsFold applies the ContainsFold predicate on the "feed_title" field.
func FeedTitleContainsFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFeedTitle), v))
	})
}

// FeedDescriptionEQ applies the EQ predicate on the "feed_description" field.
func FeedDescriptionEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedDescription), v))
	})
}

// FeedDescriptionNEQ applies the NEQ predicate on the "feed_description" field.
func FeedDescriptionNEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFeedDescription), v))
	})
}

// FeedDescriptionIn applies the In predicate on the "feed_description" field.
func FeedDescriptionIn(vs ...string) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFeedDescription), v...))
	})
}

// FeedDescriptionNotIn applies the NotIn predicate on the "feed_description" field.
func FeedDescriptionNotIn(vs ...string) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFeedDescription), v...))
	})
}

// FeedDescriptionGT applies the GT predicate on the "feed_description" field.
func FeedDescriptionGT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFeedDescription), v))
	})
}

// FeedDescriptionGTE applies the GTE predicate on the "feed_description" field.
func FeedDescriptionGTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFeedDescription), v))
	})
}

// FeedDescriptionLT applies the LT predicate on the "feed_description" field.
func FeedDescriptionLT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFeedDescription), v))
	})
}

// FeedDescriptionLTE applies the LTE predicate on the "feed_description" field.
func FeedDescriptionLTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFeedDescription), v))
	})
}

// FeedDescriptionContains applies the Contains predicate on the "feed_description" field.
func FeedDescriptionContains(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFeedDescription), v))
	})
}

// FeedDescriptionHasPrefix applies the HasPrefix predicate on the "feed_description" field.
func FeedDescriptionHasPrefix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFeedDescription), v))
	})
}

// FeedDescriptionHasSuffix applies the HasSuffix predicate on the "feed_description" field.
func FeedDescriptionHasSuffix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFeedDescription), v))
	})
}

// FeedDescriptionEqualFold applies the EqualFold predicate on the "feed_description" field.
func FeedDescriptionEqualFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFeedDescription), v))
	})
}

// FeedDescriptionContainsFold applies the ContainsFold predicate on the "feed_description" field.
func FeedDescriptionContainsFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFeedDescription), v))
	})
}

// FeedLinkEQ applies the EQ predicate on the "feed_link" field.
func FeedLinkEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedLink), v))
	})
}

// FeedLinkNEQ applies the NEQ predicate on the "feed_link" field.
func FeedLinkNEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFeedLink), v))
	})
}

// FeedLinkIn applies the In predicate on the "feed_link" field.
func FeedLinkIn(vs ...string) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFeedLink), v...))
	})
}

// FeedLinkNotIn applies the NotIn predicate on the "feed_link" field.
func FeedLinkNotIn(vs ...string) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFeedLink), v...))
	})
}

// FeedLinkGT applies the GT predicate on the "feed_link" field.
func FeedLinkGT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFeedLink), v))
	})
}

// FeedLinkGTE applies the GTE predicate on the "feed_link" field.
func FeedLinkGTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFeedLink), v))
	})
}

// FeedLinkLT applies the LT predicate on the "feed_link" field.
func FeedLinkLT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFeedLink), v))
	})
}

// FeedLinkLTE applies the LTE predicate on the "feed_link" field.
func FeedLinkLTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFeedLink), v))
	})
}

// FeedLinkContains applies the Contains predicate on the "feed_link" field.
func FeedLinkContains(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFeedLink), v))
	})
}

// FeedLinkHasPrefix applies the HasPrefix predicate on the "feed_link" field.
func FeedLinkHasPrefix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFeedLink), v))
	})
}

// FeedLinkHasSuffix applies the HasSuffix predicate on the "feed_link" field.
func FeedLinkHasSuffix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFeedLink), v))
	})
}

// FeedLinkEqualFold applies the EqualFold predicate on the "feed_link" field.
func FeedLinkEqualFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFeedLink), v))
	})
}

// FeedLinkContainsFold applies the ContainsFold predicate on the "feed_link" field.
func FeedLinkContainsFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFeedLink), v))
	})
}

// FeedFeedLinkEQ applies the EQ predicate on the "feed_feed_link" field.
func FeedFeedLinkEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedFeedLink), v))
	})
}

// FeedFeedLinkNEQ applies the NEQ predicate on the "feed_feed_link" field.
func FeedFeedLinkNEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFeedFeedLink), v))
	})
}

// FeedFeedLinkIn applies the In predicate on the "feed_feed_link" field.
func FeedFeedLinkIn(vs ...string) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFeedFeedLink), v...))
	})
}

// FeedFeedLinkNotIn applies the NotIn predicate on the "feed_feed_link" field.
func FeedFeedLinkNotIn(vs ...string) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFeedFeedLink), v...))
	})
}

// FeedFeedLinkGT applies the GT predicate on the "feed_feed_link" field.
func FeedFeedLinkGT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFeedFeedLink), v))
	})
}

// FeedFeedLinkGTE applies the GTE predicate on the "feed_feed_link" field.
func FeedFeedLinkGTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFeedFeedLink), v))
	})
}

// FeedFeedLinkLT applies the LT predicate on the "feed_feed_link" field.
func FeedFeedLinkLT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFeedFeedLink), v))
	})
}

// FeedFeedLinkLTE applies the LTE predicate on the "feed_feed_link" field.
func FeedFeedLinkLTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFeedFeedLink), v))
	})
}

// FeedFeedLinkContains applies the Contains predicate on the "feed_feed_link" field.
func FeedFeedLinkContains(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFeedFeedLink), v))
	})
}

// FeedFeedLinkHasPrefix applies the HasPrefix predicate on the "feed_feed_link" field.
func FeedFeedLinkHasPrefix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFeedFeedLink), v))
	})
}

// FeedFeedLinkHasSuffix applies the HasSuffix predicate on the "feed_feed_link" field.
func FeedFeedLinkHasSuffix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFeedFeedLink), v))
	})
}

// FeedFeedLinkEqualFold applies the EqualFold predicate on the "feed_feed_link" field.
func FeedFeedLinkEqualFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFeedFeedLink), v))
	})
}

// FeedFeedLinkContainsFold applies the ContainsFold predicate on the "feed_feed_link" field.
func FeedFeedLinkContainsFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFeedFeedLink), v))
	})
}

// FeedUpdatedEQ applies the EQ predicate on the "feed_updated" field.
func FeedUpdatedEQ(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedUpdated), v))
	})
}

// FeedUpdatedNEQ applies the NEQ predicate on the "feed_updated" field.
func FeedUpdatedNEQ(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFeedUpdated), v))
	})
}

// FeedUpdatedIn applies the In predicate on the "feed_updated" field.
func FeedUpdatedIn(vs ...time.Time) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFeedUpdated), v...))
	})
}

// FeedUpdatedNotIn applies the NotIn predicate on the "feed_updated" field.
func FeedUpdatedNotIn(vs ...time.Time) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFeedUpdated), v...))
	})
}

// FeedUpdatedGT applies the GT predicate on the "feed_updated" field.
func FeedUpdatedGT(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFeedUpdated), v))
	})
}

// FeedUpdatedGTE applies the GTE predicate on the "feed_updated" field.
func FeedUpdatedGTE(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFeedUpdated), v))
	})
}

// FeedUpdatedLT applies the LT predicate on the "feed_updated" field.
func FeedUpdatedLT(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFeedUpdated), v))
	})
}

// FeedUpdatedLTE applies the LTE predicate on the "feed_updated" field.
func FeedUpdatedLTE(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFeedUpdated), v))
	})
}

// FeedPublishedEQ applies the EQ predicate on the "feed_published" field.
func FeedPublishedEQ(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedPublished), v))
	})
}

// FeedPublishedNEQ applies the NEQ predicate on the "feed_published" field.
func FeedPublishedNEQ(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFeedPublished), v))
	})
}

// FeedPublishedIn applies the In predicate on the "feed_published" field.
func FeedPublishedIn(vs ...time.Time) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFeedPublished), v...))
	})
}

// FeedPublishedNotIn applies the NotIn predicate on the "feed_published" field.
func FeedPublishedNotIn(vs ...time.Time) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFeedPublished), v...))
	})
}

// FeedPublishedGT applies the GT predicate on the "feed_published" field.
func FeedPublishedGT(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFeedPublished), v))
	})
}

// FeedPublishedGTE applies the GTE predicate on the "feed_published" field.
func FeedPublishedGTE(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFeedPublished), v))
	})
}

// FeedPublishedLT applies the LT predicate on the "feed_published" field.
func FeedPublishedLT(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFeedPublished), v))
	})
}

// FeedPublishedLTE applies the LTE predicate on the "feed_published" field.
func FeedPublishedLTE(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFeedPublished), v))
	})
}

// FeedAuthorNameEQ applies the EQ predicate on the "feed_author_name" field.
func FeedAuthorNameEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedAuthorName), v))
	})
}

// FeedAuthorNameNEQ applies the NEQ predicate on the "feed_author_name" field.
func FeedAuthorNameNEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFeedAuthorName), v))
	})
}

// FeedAuthorNameIn applies the In predicate on the "feed_author_name" field.
func FeedAuthorNameIn(vs ...string) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFeedAuthorName), v...))
	})
}

// FeedAuthorNameNotIn applies the NotIn predicate on the "feed_author_name" field.
func FeedAuthorNameNotIn(vs ...string) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFeedAuthorName), v...))
	})
}

// FeedAuthorNameGT applies the GT predicate on the "feed_author_name" field.
func FeedAuthorNameGT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFeedAuthorName), v))
	})
}

// FeedAuthorNameGTE applies the GTE predicate on the "feed_author_name" field.
func FeedAuthorNameGTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFeedAuthorName), v))
	})
}

// FeedAuthorNameLT applies the LT predicate on the "feed_author_name" field.
func FeedAuthorNameLT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFeedAuthorName), v))
	})
}

// FeedAuthorNameLTE applies the LTE predicate on the "feed_author_name" field.
func FeedAuthorNameLTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFeedAuthorName), v))
	})
}

// FeedAuthorNameContains applies the Contains predicate on the "feed_author_name" field.
func FeedAuthorNameContains(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFeedAuthorName), v))
	})
}

// FeedAuthorNameHasPrefix applies the HasPrefix predicate on the "feed_author_name" field.
func FeedAuthorNameHasPrefix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFeedAuthorName), v))
	})
}

// FeedAuthorNameHasSuffix applies the HasSuffix predicate on the "feed_author_name" field.
func FeedAuthorNameHasSuffix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFeedAuthorName), v))
	})
}

// FeedAuthorNameIsNil applies the IsNil predicate on the "feed_author_name" field.
func FeedAuthorNameIsNil() predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFeedAuthorName)))
	})
}

// FeedAuthorNameNotNil applies the NotNil predicate on the "feed_author_name" field.
func FeedAuthorNameNotNil() predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFeedAuthorName)))
	})
}

// FeedAuthorNameEqualFold applies the EqualFold predicate on the "feed_author_name" field.
func FeedAuthorNameEqualFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFeedAuthorName), v))
	})
}

// FeedAuthorNameContainsFold applies the ContainsFold predicate on the "feed_author_name" field.
func FeedAuthorNameContainsFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFeedAuthorName), v))
	})
}

// FeedAuthorEmailEQ applies the EQ predicate on the "feed_author_email" field.
func FeedAuthorEmailEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedAuthorEmail), v))
	})
}

// FeedAuthorEmailNEQ applies the NEQ predicate on the "feed_author_email" field.
func FeedAuthorEmailNEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFeedAuthorEmail), v))
	})
}

// FeedAuthorEmailIn applies the In predicate on the "feed_author_email" field.
func FeedAuthorEmailIn(vs ...string) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFeedAuthorEmail), v...))
	})
}

// FeedAuthorEmailNotIn applies the NotIn predicate on the "feed_author_email" field.
func FeedAuthorEmailNotIn(vs ...string) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFeedAuthorEmail), v...))
	})
}

// FeedAuthorEmailGT applies the GT predicate on the "feed_author_email" field.
func FeedAuthorEmailGT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFeedAuthorEmail), v))
	})
}

// FeedAuthorEmailGTE applies the GTE predicate on the "feed_author_email" field.
func FeedAuthorEmailGTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFeedAuthorEmail), v))
	})
}

// FeedAuthorEmailLT applies the LT predicate on the "feed_author_email" field.
func FeedAuthorEmailLT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFeedAuthorEmail), v))
	})
}

// FeedAuthorEmailLTE applies the LTE predicate on the "feed_author_email" field.
func FeedAuthorEmailLTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFeedAuthorEmail), v))
	})
}

// FeedAuthorEmailContains applies the Contains predicate on the "feed_author_email" field.
func FeedAuthorEmailContains(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFeedAuthorEmail), v))
	})
}

// FeedAuthorEmailHasPrefix applies the HasPrefix predicate on the "feed_author_email" field.
func FeedAuthorEmailHasPrefix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFeedAuthorEmail), v))
	})
}

// FeedAuthorEmailHasSuffix applies the HasSuffix predicate on the "feed_author_email" field.
func FeedAuthorEmailHasSuffix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFeedAuthorEmail), v))
	})
}

// FeedAuthorEmailIsNil applies the IsNil predicate on the "feed_author_email" field.
func FeedAuthorEmailIsNil() predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFeedAuthorEmail)))
	})
}

// FeedAuthorEmailNotNil applies the NotNil predicate on the "feed_author_email" field.
func FeedAuthorEmailNotNil() predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFeedAuthorEmail)))
	})
}

// FeedAuthorEmailEqualFold applies the EqualFold predicate on the "feed_author_email" field.
func FeedAuthorEmailEqualFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFeedAuthorEmail), v))
	})
}

// FeedAuthorEmailContainsFold applies the ContainsFold predicate on the "feed_author_email" field.
func FeedAuthorEmailContainsFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFeedAuthorEmail), v))
	})
}

// FeedLanguageEQ applies the EQ predicate on the "feed_language" field.
func FeedLanguageEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedLanguage), v))
	})
}

// FeedLanguageNEQ applies the NEQ predicate on the "feed_language" field.
func FeedLanguageNEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFeedLanguage), v))
	})
}

// FeedLanguageIn applies the In predicate on the "feed_language" field.
func FeedLanguageIn(vs ...string) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFeedLanguage), v...))
	})
}

// FeedLanguageNotIn applies the NotIn predicate on the "feed_language" field.
func FeedLanguageNotIn(vs ...string) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFeedLanguage), v...))
	})
}

// FeedLanguageGT applies the GT predicate on the "feed_language" field.
func FeedLanguageGT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFeedLanguage), v))
	})
}

// FeedLanguageGTE applies the GTE predicate on the "feed_language" field.
func FeedLanguageGTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFeedLanguage), v))
	})
}

// FeedLanguageLT applies the LT predicate on the "feed_language" field.
func FeedLanguageLT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFeedLanguage), v))
	})
}

// FeedLanguageLTE applies the LTE predicate on the "feed_language" field.
func FeedLanguageLTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFeedLanguage), v))
	})
}

// FeedLanguageContains applies the Contains predicate on the "feed_language" field.
func FeedLanguageContains(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFeedLanguage), v))
	})
}

// FeedLanguageHasPrefix applies the HasPrefix predicate on the "feed_language" field.
func FeedLanguageHasPrefix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFeedLanguage), v))
	})
}

// FeedLanguageHasSuffix applies the HasSuffix predicate on the "feed_language" field.
func FeedLanguageHasSuffix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFeedLanguage), v))
	})
}

// FeedLanguageEqualFold applies the EqualFold predicate on the "feed_language" field.
func FeedLanguageEqualFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFeedLanguage), v))
	})
}

// FeedLanguageContainsFold applies the ContainsFold predicate on the "feed_language" field.
func FeedLanguageContainsFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFeedLanguage), v))
	})
}

// FeedImageTitleEQ applies the EQ predicate on the "feed_image_title" field.
func FeedImageTitleEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedImageTitle), v))
	})
}

// FeedImageTitleNEQ applies the NEQ predicate on the "feed_image_title" field.
func FeedImageTitleNEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFeedImageTitle), v))
	})
}

// FeedImageTitleIn applies the In predicate on the "feed_image_title" field.
func FeedImageTitleIn(vs ...string) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFeedImageTitle), v...))
	})
}

// FeedImageTitleNotIn applies the NotIn predicate on the "feed_image_title" field.
func FeedImageTitleNotIn(vs ...string) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFeedImageTitle), v...))
	})
}

// FeedImageTitleGT applies the GT predicate on the "feed_image_title" field.
func FeedImageTitleGT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFeedImageTitle), v))
	})
}

// FeedImageTitleGTE applies the GTE predicate on the "feed_image_title" field.
func FeedImageTitleGTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFeedImageTitle), v))
	})
}

// FeedImageTitleLT applies the LT predicate on the "feed_image_title" field.
func FeedImageTitleLT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFeedImageTitle), v))
	})
}

// FeedImageTitleLTE applies the LTE predicate on the "feed_image_title" field.
func FeedImageTitleLTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFeedImageTitle), v))
	})
}

// FeedImageTitleContains applies the Contains predicate on the "feed_image_title" field.
func FeedImageTitleContains(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFeedImageTitle), v))
	})
}

// FeedImageTitleHasPrefix applies the HasPrefix predicate on the "feed_image_title" field.
func FeedImageTitleHasPrefix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFeedImageTitle), v))
	})
}

// FeedImageTitleHasSuffix applies the HasSuffix predicate on the "feed_image_title" field.
func FeedImageTitleHasSuffix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFeedImageTitle), v))
	})
}

// FeedImageTitleIsNil applies the IsNil predicate on the "feed_image_title" field.
func FeedImageTitleIsNil() predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFeedImageTitle)))
	})
}

// FeedImageTitleNotNil applies the NotNil predicate on the "feed_image_title" field.
func FeedImageTitleNotNil() predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFeedImageTitle)))
	})
}

// FeedImageTitleEqualFold applies the EqualFold predicate on the "feed_image_title" field.
func FeedImageTitleEqualFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFeedImageTitle), v))
	})
}

// FeedImageTitleContainsFold applies the ContainsFold predicate on the "feed_image_title" field.
func FeedImageTitleContainsFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFeedImageTitle), v))
	})
}

// FeedImageURLEQ applies the EQ predicate on the "feed_image_url" field.
func FeedImageURLEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedImageURL), v))
	})
}

// FeedImageURLNEQ applies the NEQ predicate on the "feed_image_url" field.
func FeedImageURLNEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFeedImageURL), v))
	})
}

// FeedImageURLIn applies the In predicate on the "feed_image_url" field.
func FeedImageURLIn(vs ...string) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFeedImageURL), v...))
	})
}

// FeedImageURLNotIn applies the NotIn predicate on the "feed_image_url" field.
func FeedImageURLNotIn(vs ...string) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFeedImageURL), v...))
	})
}

// FeedImageURLGT applies the GT predicate on the "feed_image_url" field.
func FeedImageURLGT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFeedImageURL), v))
	})
}

// FeedImageURLGTE applies the GTE predicate on the "feed_image_url" field.
func FeedImageURLGTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFeedImageURL), v))
	})
}

// FeedImageURLLT applies the LT predicate on the "feed_image_url" field.
func FeedImageURLLT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFeedImageURL), v))
	})
}

// FeedImageURLLTE applies the LTE predicate on the "feed_image_url" field.
func FeedImageURLLTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFeedImageURL), v))
	})
}

// FeedImageURLContains applies the Contains predicate on the "feed_image_url" field.
func FeedImageURLContains(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFeedImageURL), v))
	})
}

// FeedImageURLHasPrefix applies the HasPrefix predicate on the "feed_image_url" field.
func FeedImageURLHasPrefix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFeedImageURL), v))
	})
}

// FeedImageURLHasSuffix applies the HasSuffix predicate on the "feed_image_url" field.
func FeedImageURLHasSuffix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFeedImageURL), v))
	})
}

// FeedImageURLIsNil applies the IsNil predicate on the "feed_image_url" field.
func FeedImageURLIsNil() predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFeedImageURL)))
	})
}

// FeedImageURLNotNil applies the NotNil predicate on the "feed_image_url" field.
func FeedImageURLNotNil() predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFeedImageURL)))
	})
}

// FeedImageURLEqualFold applies the EqualFold predicate on the "feed_image_url" field.
func FeedImageURLEqualFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFeedImageURL), v))
	})
}

// FeedImageURLContainsFold applies the ContainsFold predicate on the "feed_image_url" field.
func FeedImageURLContainsFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFeedImageURL), v))
	})
}

// FeedCopyrightEQ applies the EQ predicate on the "feed_copyright" field.
func FeedCopyrightEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedCopyright), v))
	})
}

// FeedCopyrightNEQ applies the NEQ predicate on the "feed_copyright" field.
func FeedCopyrightNEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFeedCopyright), v))
	})
}

// FeedCopyrightIn applies the In predicate on the "feed_copyright" field.
func FeedCopyrightIn(vs ...string) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFeedCopyright), v...))
	})
}

// FeedCopyrightNotIn applies the NotIn predicate on the "feed_copyright" field.
func FeedCopyrightNotIn(vs ...string) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFeedCopyright), v...))
	})
}

// FeedCopyrightGT applies the GT predicate on the "feed_copyright" field.
func FeedCopyrightGT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFeedCopyright), v))
	})
}

// FeedCopyrightGTE applies the GTE predicate on the "feed_copyright" field.
func FeedCopyrightGTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFeedCopyright), v))
	})
}

// FeedCopyrightLT applies the LT predicate on the "feed_copyright" field.
func FeedCopyrightLT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFeedCopyright), v))
	})
}

// FeedCopyrightLTE applies the LTE predicate on the "feed_copyright" field.
func FeedCopyrightLTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFeedCopyright), v))
	})
}

// FeedCopyrightContains applies the Contains predicate on the "feed_copyright" field.
func FeedCopyrightContains(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFeedCopyright), v))
	})
}

// FeedCopyrightHasPrefix applies the HasPrefix predicate on the "feed_copyright" field.
func FeedCopyrightHasPrefix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFeedCopyright), v))
	})
}

// FeedCopyrightHasSuffix applies the HasSuffix predicate on the "feed_copyright" field.
func FeedCopyrightHasSuffix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFeedCopyright), v))
	})
}

// FeedCopyrightEqualFold applies the EqualFold predicate on the "feed_copyright" field.
func FeedCopyrightEqualFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFeedCopyright), v))
	})
}

// FeedCopyrightContainsFold applies the ContainsFold predicate on the "feed_copyright" field.
func FeedCopyrightContainsFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFeedCopyright), v))
	})
}

// FeedGeneratorEQ applies the EQ predicate on the "feed_generator" field.
func FeedGeneratorEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedGenerator), v))
	})
}

// FeedGeneratorNEQ applies the NEQ predicate on the "feed_generator" field.
func FeedGeneratorNEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFeedGenerator), v))
	})
}

// FeedGeneratorIn applies the In predicate on the "feed_generator" field.
func FeedGeneratorIn(vs ...string) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFeedGenerator), v...))
	})
}

// FeedGeneratorNotIn applies the NotIn predicate on the "feed_generator" field.
func FeedGeneratorNotIn(vs ...string) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFeedGenerator), v...))
	})
}

// FeedGeneratorGT applies the GT predicate on the "feed_generator" field.
func FeedGeneratorGT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFeedGenerator), v))
	})
}

// FeedGeneratorGTE applies the GTE predicate on the "feed_generator" field.
func FeedGeneratorGTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFeedGenerator), v))
	})
}

// FeedGeneratorLT applies the LT predicate on the "feed_generator" field.
func FeedGeneratorLT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFeedGenerator), v))
	})
}

// FeedGeneratorLTE applies the LTE predicate on the "feed_generator" field.
func FeedGeneratorLTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFeedGenerator), v))
	})
}

// FeedGeneratorContains applies the Contains predicate on the "feed_generator" field.
func FeedGeneratorContains(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFeedGenerator), v))
	})
}

// FeedGeneratorHasPrefix applies the HasPrefix predicate on the "feed_generator" field.
func FeedGeneratorHasPrefix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFeedGenerator), v))
	})
}

// FeedGeneratorHasSuffix applies the HasSuffix predicate on the "feed_generator" field.
func FeedGeneratorHasSuffix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFeedGenerator), v))
	})
}

// FeedGeneratorEqualFold applies the EqualFold predicate on the "feed_generator" field.
func FeedGeneratorEqualFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFeedGenerator), v))
	})
}

// FeedGeneratorContainsFold applies the ContainsFold predicate on the "feed_generator" field.
func FeedGeneratorContainsFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFeedGenerator), v))
	})
}

// FeedCategoriesEQ applies the EQ predicate on the "feed_categories" field.
func FeedCategoriesEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedCategories), v))
	})
}

// FeedCategoriesNEQ applies the NEQ predicate on the "feed_categories" field.
func FeedCategoriesNEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFeedCategories), v))
	})
}

// FeedCategoriesIn applies the In predicate on the "feed_categories" field.
func FeedCategoriesIn(vs ...string) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFeedCategories), v...))
	})
}

// FeedCategoriesNotIn applies the NotIn predicate on the "feed_categories" field.
func FeedCategoriesNotIn(vs ...string) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFeedCategories), v...))
	})
}

// FeedCategoriesGT applies the GT predicate on the "feed_categories" field.
func FeedCategoriesGT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFeedCategories), v))
	})
}

// FeedCategoriesGTE applies the GTE predicate on the "feed_categories" field.
func FeedCategoriesGTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFeedCategories), v))
	})
}

// FeedCategoriesLT applies the LT predicate on the "feed_categories" field.
func FeedCategoriesLT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFeedCategories), v))
	})
}

// FeedCategoriesLTE applies the LTE predicate on the "feed_categories" field.
func FeedCategoriesLTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFeedCategories), v))
	})
}

// FeedCategoriesContains applies the Contains predicate on the "feed_categories" field.
func FeedCategoriesContains(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFeedCategories), v))
	})
}

// FeedCategoriesHasPrefix applies the HasPrefix predicate on the "feed_categories" field.
func FeedCategoriesHasPrefix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFeedCategories), v))
	})
}

// FeedCategoriesHasSuffix applies the HasSuffix predicate on the "feed_categories" field.
func FeedCategoriesHasSuffix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFeedCategories), v))
	})
}

// FeedCategoriesEqualFold applies the EqualFold predicate on the "feed_categories" field.
func FeedCategoriesEqualFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFeedCategories), v))
	})
}

// FeedCategoriesContainsFold applies the ContainsFold predicate on the "feed_categories" field.
func FeedCategoriesContainsFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFeedCategories), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Feed {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// HasItems applies the HasEdge predicate on the "items" edge.
func HasItems() predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ItemsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ItemsTable, ItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasItemsWith applies the HasEdge predicate on the "items" edge with a given conditions (other predicates).
func HasItemsWith(preds ...predicate.Item) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ItemsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ItemsTable, ItemsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubscribedUsers applies the HasEdge predicate on the "subscribed_users" edge.
func HasSubscribedUsers() predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SubscribedUsersTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, SubscribedUsersTable, SubscribedUsersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscribedUsersWith applies the HasEdge predicate on the "subscribed_users" edge with a given conditions (other predicates).
func HasSubscribedUsersWith(preds ...predicate.User) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SubscribedUsersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, SubscribedUsersTable, SubscribedUsersPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubscriptions applies the HasEdge predicate on the "subscriptions" edge.
func HasSubscriptions() predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SubscriptionsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, SubscriptionsTable, SubscriptionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscriptionsWith applies the HasEdge predicate on the "subscriptions" edge with a given conditions (other predicates).
func HasSubscriptionsWith(preds ...predicate.Subscription) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SubscriptionsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, SubscriptionsTable, SubscriptionsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Feed) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Feed) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Feed) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		p(s.Not())
	})
}
