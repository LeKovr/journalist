// Code generated by ent, DO NOT EDIT.

package item

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/mrusme/journalist/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ItemGUID applies equality check predicate on the "item_guid" field. It's identical to ItemGUIDEQ.
func ItemGUID(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemGUID), v))
	})
}

// ItemTitle applies equality check predicate on the "item_title" field. It's identical to ItemTitleEQ.
func ItemTitle(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemTitle), v))
	})
}

// ItemDescription applies equality check predicate on the "item_description" field. It's identical to ItemDescriptionEQ.
func ItemDescription(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemDescription), v))
	})
}

// ItemContent applies equality check predicate on the "item_content" field. It's identical to ItemContentEQ.
func ItemContent(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemContent), v))
	})
}

// ItemLink applies equality check predicate on the "item_link" field. It's identical to ItemLinkEQ.
func ItemLink(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemLink), v))
	})
}

// ItemUpdated applies equality check predicate on the "item_updated" field. It's identical to ItemUpdatedEQ.
func ItemUpdated(v time.Time) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemUpdated), v))
	})
}

// ItemPublished applies equality check predicate on the "item_published" field. It's identical to ItemPublishedEQ.
func ItemPublished(v time.Time) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemPublished), v))
	})
}

// ItemAuthorName applies equality check predicate on the "item_author_name" field. It's identical to ItemAuthorNameEQ.
func ItemAuthorName(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemAuthorName), v))
	})
}

// ItemAuthorEmail applies equality check predicate on the "item_author_email" field. It's identical to ItemAuthorEmailEQ.
func ItemAuthorEmail(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemAuthorEmail), v))
	})
}

// ItemImageTitle applies equality check predicate on the "item_image_title" field. It's identical to ItemImageTitleEQ.
func ItemImageTitle(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemImageTitle), v))
	})
}

// ItemImageURL applies equality check predicate on the "item_image_url" field. It's identical to ItemImageURLEQ.
func ItemImageURL(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemImageURL), v))
	})
}

// ItemCategories applies equality check predicate on the "item_categories" field. It's identical to ItemCategoriesEQ.
func ItemCategories(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemCategories), v))
	})
}

// ItemEnclosures applies equality check predicate on the "item_enclosures" field. It's identical to ItemEnclosuresEQ.
func ItemEnclosures(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemEnclosures), v))
	})
}

// CrawlerTitle applies equality check predicate on the "crawler_title" field. It's identical to CrawlerTitleEQ.
func CrawlerTitle(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCrawlerTitle), v))
	})
}

// CrawlerAuthor applies equality check predicate on the "crawler_author" field. It's identical to CrawlerAuthorEQ.
func CrawlerAuthor(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCrawlerAuthor), v))
	})
}

// CrawlerExcerpt applies equality check predicate on the "crawler_excerpt" field. It's identical to CrawlerExcerptEQ.
func CrawlerExcerpt(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCrawlerExcerpt), v))
	})
}

// CrawlerSiteName applies equality check predicate on the "crawler_site_name" field. It's identical to CrawlerSiteNameEQ.
func CrawlerSiteName(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCrawlerSiteName), v))
	})
}

// CrawlerImage applies equality check predicate on the "crawler_image" field. It's identical to CrawlerImageEQ.
func CrawlerImage(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCrawlerImage), v))
	})
}

// CrawlerContentHTML applies equality check predicate on the "crawler_content_html" field. It's identical to CrawlerContentHTMLEQ.
func CrawlerContentHTML(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCrawlerContentHTML), v))
	})
}

// CrawlerContentText applies equality check predicate on the "crawler_content_text" field. It's identical to CrawlerContentTextEQ.
func CrawlerContentText(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCrawlerContentText), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// ItemGUIDEQ applies the EQ predicate on the "item_guid" field.
func ItemGUIDEQ(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemGUID), v))
	})
}

// ItemGUIDNEQ applies the NEQ predicate on the "item_guid" field.
func ItemGUIDNEQ(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldItemGUID), v))
	})
}

// ItemGUIDIn applies the In predicate on the "item_guid" field.
func ItemGUIDIn(vs ...string) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldItemGUID), v...))
	})
}

// ItemGUIDNotIn applies the NotIn predicate on the "item_guid" field.
func ItemGUIDNotIn(vs ...string) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldItemGUID), v...))
	})
}

// ItemGUIDGT applies the GT predicate on the "item_guid" field.
func ItemGUIDGT(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldItemGUID), v))
	})
}

// ItemGUIDGTE applies the GTE predicate on the "item_guid" field.
func ItemGUIDGTE(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldItemGUID), v))
	})
}

// ItemGUIDLT applies the LT predicate on the "item_guid" field.
func ItemGUIDLT(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldItemGUID), v))
	})
}

// ItemGUIDLTE applies the LTE predicate on the "item_guid" field.
func ItemGUIDLTE(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldItemGUID), v))
	})
}

// ItemGUIDContains applies the Contains predicate on the "item_guid" field.
func ItemGUIDContains(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldItemGUID), v))
	})
}

// ItemGUIDHasPrefix applies the HasPrefix predicate on the "item_guid" field.
func ItemGUIDHasPrefix(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldItemGUID), v))
	})
}

// ItemGUIDHasSuffix applies the HasSuffix predicate on the "item_guid" field.
func ItemGUIDHasSuffix(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldItemGUID), v))
	})
}

// ItemGUIDEqualFold applies the EqualFold predicate on the "item_guid" field.
func ItemGUIDEqualFold(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldItemGUID), v))
	})
}

// ItemGUIDContainsFold applies the ContainsFold predicate on the "item_guid" field.
func ItemGUIDContainsFold(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldItemGUID), v))
	})
}

// ItemTitleEQ applies the EQ predicate on the "item_title" field.
func ItemTitleEQ(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemTitle), v))
	})
}

// ItemTitleNEQ applies the NEQ predicate on the "item_title" field.
func ItemTitleNEQ(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldItemTitle), v))
	})
}

// ItemTitleIn applies the In predicate on the "item_title" field.
func ItemTitleIn(vs ...string) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldItemTitle), v...))
	})
}

// ItemTitleNotIn applies the NotIn predicate on the "item_title" field.
func ItemTitleNotIn(vs ...string) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldItemTitle), v...))
	})
}

// ItemTitleGT applies the GT predicate on the "item_title" field.
func ItemTitleGT(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldItemTitle), v))
	})
}

// ItemTitleGTE applies the GTE predicate on the "item_title" field.
func ItemTitleGTE(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldItemTitle), v))
	})
}

// ItemTitleLT applies the LT predicate on the "item_title" field.
func ItemTitleLT(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldItemTitle), v))
	})
}

// ItemTitleLTE applies the LTE predicate on the "item_title" field.
func ItemTitleLTE(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldItemTitle), v))
	})
}

// ItemTitleContains applies the Contains predicate on the "item_title" field.
func ItemTitleContains(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldItemTitle), v))
	})
}

// ItemTitleHasPrefix applies the HasPrefix predicate on the "item_title" field.
func ItemTitleHasPrefix(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldItemTitle), v))
	})
}

// ItemTitleHasSuffix applies the HasSuffix predicate on the "item_title" field.
func ItemTitleHasSuffix(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldItemTitle), v))
	})
}

// ItemTitleEqualFold applies the EqualFold predicate on the "item_title" field.
func ItemTitleEqualFold(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldItemTitle), v))
	})
}

// ItemTitleContainsFold applies the ContainsFold predicate on the "item_title" field.
func ItemTitleContainsFold(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldItemTitle), v))
	})
}

// ItemDescriptionEQ applies the EQ predicate on the "item_description" field.
func ItemDescriptionEQ(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemDescription), v))
	})
}

// ItemDescriptionNEQ applies the NEQ predicate on the "item_description" field.
func ItemDescriptionNEQ(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldItemDescription), v))
	})
}

// ItemDescriptionIn applies the In predicate on the "item_description" field.
func ItemDescriptionIn(vs ...string) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldItemDescription), v...))
	})
}

// ItemDescriptionNotIn applies the NotIn predicate on the "item_description" field.
func ItemDescriptionNotIn(vs ...string) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldItemDescription), v...))
	})
}

// ItemDescriptionGT applies the GT predicate on the "item_description" field.
func ItemDescriptionGT(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldItemDescription), v))
	})
}

// ItemDescriptionGTE applies the GTE predicate on the "item_description" field.
func ItemDescriptionGTE(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldItemDescription), v))
	})
}

// ItemDescriptionLT applies the LT predicate on the "item_description" field.
func ItemDescriptionLT(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldItemDescription), v))
	})
}

// ItemDescriptionLTE applies the LTE predicate on the "item_description" field.
func ItemDescriptionLTE(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldItemDescription), v))
	})
}

// ItemDescriptionContains applies the Contains predicate on the "item_description" field.
func ItemDescriptionContains(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldItemDescription), v))
	})
}

// ItemDescriptionHasPrefix applies the HasPrefix predicate on the "item_description" field.
func ItemDescriptionHasPrefix(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldItemDescription), v))
	})
}

// ItemDescriptionHasSuffix applies the HasSuffix predicate on the "item_description" field.
func ItemDescriptionHasSuffix(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldItemDescription), v))
	})
}

// ItemDescriptionEqualFold applies the EqualFold predicate on the "item_description" field.
func ItemDescriptionEqualFold(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldItemDescription), v))
	})
}

// ItemDescriptionContainsFold applies the ContainsFold predicate on the "item_description" field.
func ItemDescriptionContainsFold(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldItemDescription), v))
	})
}

// ItemContentEQ applies the EQ predicate on the "item_content" field.
func ItemContentEQ(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemContent), v))
	})
}

// ItemContentNEQ applies the NEQ predicate on the "item_content" field.
func ItemContentNEQ(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldItemContent), v))
	})
}

// ItemContentIn applies the In predicate on the "item_content" field.
func ItemContentIn(vs ...string) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldItemContent), v...))
	})
}

// ItemContentNotIn applies the NotIn predicate on the "item_content" field.
func ItemContentNotIn(vs ...string) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldItemContent), v...))
	})
}

// ItemContentGT applies the GT predicate on the "item_content" field.
func ItemContentGT(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldItemContent), v))
	})
}

// ItemContentGTE applies the GTE predicate on the "item_content" field.
func ItemContentGTE(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldItemContent), v))
	})
}

// ItemContentLT applies the LT predicate on the "item_content" field.
func ItemContentLT(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldItemContent), v))
	})
}

// ItemContentLTE applies the LTE predicate on the "item_content" field.
func ItemContentLTE(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldItemContent), v))
	})
}

// ItemContentContains applies the Contains predicate on the "item_content" field.
func ItemContentContains(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldItemContent), v))
	})
}

// ItemContentHasPrefix applies the HasPrefix predicate on the "item_content" field.
func ItemContentHasPrefix(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldItemContent), v))
	})
}

// ItemContentHasSuffix applies the HasSuffix predicate on the "item_content" field.
func ItemContentHasSuffix(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldItemContent), v))
	})
}

// ItemContentEqualFold applies the EqualFold predicate on the "item_content" field.
func ItemContentEqualFold(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldItemContent), v))
	})
}

// ItemContentContainsFold applies the ContainsFold predicate on the "item_content" field.
func ItemContentContainsFold(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldItemContent), v))
	})
}

// ItemLinkEQ applies the EQ predicate on the "item_link" field.
func ItemLinkEQ(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemLink), v))
	})
}

// ItemLinkNEQ applies the NEQ predicate on the "item_link" field.
func ItemLinkNEQ(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldItemLink), v))
	})
}

// ItemLinkIn applies the In predicate on the "item_link" field.
func ItemLinkIn(vs ...string) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldItemLink), v...))
	})
}

// ItemLinkNotIn applies the NotIn predicate on the "item_link" field.
func ItemLinkNotIn(vs ...string) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldItemLink), v...))
	})
}

// ItemLinkGT applies the GT predicate on the "item_link" field.
func ItemLinkGT(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldItemLink), v))
	})
}

// ItemLinkGTE applies the GTE predicate on the "item_link" field.
func ItemLinkGTE(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldItemLink), v))
	})
}

// ItemLinkLT applies the LT predicate on the "item_link" field.
func ItemLinkLT(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldItemLink), v))
	})
}

// ItemLinkLTE applies the LTE predicate on the "item_link" field.
func ItemLinkLTE(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldItemLink), v))
	})
}

// ItemLinkContains applies the Contains predicate on the "item_link" field.
func ItemLinkContains(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldItemLink), v))
	})
}

// ItemLinkHasPrefix applies the HasPrefix predicate on the "item_link" field.
func ItemLinkHasPrefix(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldItemLink), v))
	})
}

// ItemLinkHasSuffix applies the HasSuffix predicate on the "item_link" field.
func ItemLinkHasSuffix(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldItemLink), v))
	})
}

// ItemLinkEqualFold applies the EqualFold predicate on the "item_link" field.
func ItemLinkEqualFold(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldItemLink), v))
	})
}

// ItemLinkContainsFold applies the ContainsFold predicate on the "item_link" field.
func ItemLinkContainsFold(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldItemLink), v))
	})
}

// ItemUpdatedEQ applies the EQ predicate on the "item_updated" field.
func ItemUpdatedEQ(v time.Time) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemUpdated), v))
	})
}

// ItemUpdatedNEQ applies the NEQ predicate on the "item_updated" field.
func ItemUpdatedNEQ(v time.Time) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldItemUpdated), v))
	})
}

// ItemUpdatedIn applies the In predicate on the "item_updated" field.
func ItemUpdatedIn(vs ...time.Time) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldItemUpdated), v...))
	})
}

// ItemUpdatedNotIn applies the NotIn predicate on the "item_updated" field.
func ItemUpdatedNotIn(vs ...time.Time) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldItemUpdated), v...))
	})
}

// ItemUpdatedGT applies the GT predicate on the "item_updated" field.
func ItemUpdatedGT(v time.Time) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldItemUpdated), v))
	})
}

// ItemUpdatedGTE applies the GTE predicate on the "item_updated" field.
func ItemUpdatedGTE(v time.Time) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldItemUpdated), v))
	})
}

// ItemUpdatedLT applies the LT predicate on the "item_updated" field.
func ItemUpdatedLT(v time.Time) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldItemUpdated), v))
	})
}

// ItemUpdatedLTE applies the LTE predicate on the "item_updated" field.
func ItemUpdatedLTE(v time.Time) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldItemUpdated), v))
	})
}

// ItemPublishedEQ applies the EQ predicate on the "item_published" field.
func ItemPublishedEQ(v time.Time) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemPublished), v))
	})
}

// ItemPublishedNEQ applies the NEQ predicate on the "item_published" field.
func ItemPublishedNEQ(v time.Time) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldItemPublished), v))
	})
}

// ItemPublishedIn applies the In predicate on the "item_published" field.
func ItemPublishedIn(vs ...time.Time) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldItemPublished), v...))
	})
}

// ItemPublishedNotIn applies the NotIn predicate on the "item_published" field.
func ItemPublishedNotIn(vs ...time.Time) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldItemPublished), v...))
	})
}

// ItemPublishedGT applies the GT predicate on the "item_published" field.
func ItemPublishedGT(v time.Time) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldItemPublished), v))
	})
}

// ItemPublishedGTE applies the GTE predicate on the "item_published" field.
func ItemPublishedGTE(v time.Time) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldItemPublished), v))
	})
}

// ItemPublishedLT applies the LT predicate on the "item_published" field.
func ItemPublishedLT(v time.Time) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldItemPublished), v))
	})
}

// ItemPublishedLTE applies the LTE predicate on the "item_published" field.
func ItemPublishedLTE(v time.Time) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldItemPublished), v))
	})
}

// ItemAuthorNameEQ applies the EQ predicate on the "item_author_name" field.
func ItemAuthorNameEQ(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemAuthorName), v))
	})
}

// ItemAuthorNameNEQ applies the NEQ predicate on the "item_author_name" field.
func ItemAuthorNameNEQ(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldItemAuthorName), v))
	})
}

// ItemAuthorNameIn applies the In predicate on the "item_author_name" field.
func ItemAuthorNameIn(vs ...string) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldItemAuthorName), v...))
	})
}

// ItemAuthorNameNotIn applies the NotIn predicate on the "item_author_name" field.
func ItemAuthorNameNotIn(vs ...string) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldItemAuthorName), v...))
	})
}

// ItemAuthorNameGT applies the GT predicate on the "item_author_name" field.
func ItemAuthorNameGT(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldItemAuthorName), v))
	})
}

// ItemAuthorNameGTE applies the GTE predicate on the "item_author_name" field.
func ItemAuthorNameGTE(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldItemAuthorName), v))
	})
}

// ItemAuthorNameLT applies the LT predicate on the "item_author_name" field.
func ItemAuthorNameLT(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldItemAuthorName), v))
	})
}

// ItemAuthorNameLTE applies the LTE predicate on the "item_author_name" field.
func ItemAuthorNameLTE(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldItemAuthorName), v))
	})
}

// ItemAuthorNameContains applies the Contains predicate on the "item_author_name" field.
func ItemAuthorNameContains(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldItemAuthorName), v))
	})
}

// ItemAuthorNameHasPrefix applies the HasPrefix predicate on the "item_author_name" field.
func ItemAuthorNameHasPrefix(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldItemAuthorName), v))
	})
}

// ItemAuthorNameHasSuffix applies the HasSuffix predicate on the "item_author_name" field.
func ItemAuthorNameHasSuffix(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldItemAuthorName), v))
	})
}

// ItemAuthorNameIsNil applies the IsNil predicate on the "item_author_name" field.
func ItemAuthorNameIsNil() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldItemAuthorName)))
	})
}

// ItemAuthorNameNotNil applies the NotNil predicate on the "item_author_name" field.
func ItemAuthorNameNotNil() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldItemAuthorName)))
	})
}

// ItemAuthorNameEqualFold applies the EqualFold predicate on the "item_author_name" field.
func ItemAuthorNameEqualFold(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldItemAuthorName), v))
	})
}

// ItemAuthorNameContainsFold applies the ContainsFold predicate on the "item_author_name" field.
func ItemAuthorNameContainsFold(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldItemAuthorName), v))
	})
}

// ItemAuthorEmailEQ applies the EQ predicate on the "item_author_email" field.
func ItemAuthorEmailEQ(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemAuthorEmail), v))
	})
}

// ItemAuthorEmailNEQ applies the NEQ predicate on the "item_author_email" field.
func ItemAuthorEmailNEQ(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldItemAuthorEmail), v))
	})
}

// ItemAuthorEmailIn applies the In predicate on the "item_author_email" field.
func ItemAuthorEmailIn(vs ...string) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldItemAuthorEmail), v...))
	})
}

// ItemAuthorEmailNotIn applies the NotIn predicate on the "item_author_email" field.
func ItemAuthorEmailNotIn(vs ...string) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldItemAuthorEmail), v...))
	})
}

// ItemAuthorEmailGT applies the GT predicate on the "item_author_email" field.
func ItemAuthorEmailGT(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldItemAuthorEmail), v))
	})
}

// ItemAuthorEmailGTE applies the GTE predicate on the "item_author_email" field.
func ItemAuthorEmailGTE(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldItemAuthorEmail), v))
	})
}

// ItemAuthorEmailLT applies the LT predicate on the "item_author_email" field.
func ItemAuthorEmailLT(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldItemAuthorEmail), v))
	})
}

// ItemAuthorEmailLTE applies the LTE predicate on the "item_author_email" field.
func ItemAuthorEmailLTE(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldItemAuthorEmail), v))
	})
}

// ItemAuthorEmailContains applies the Contains predicate on the "item_author_email" field.
func ItemAuthorEmailContains(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldItemAuthorEmail), v))
	})
}

// ItemAuthorEmailHasPrefix applies the HasPrefix predicate on the "item_author_email" field.
func ItemAuthorEmailHasPrefix(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldItemAuthorEmail), v))
	})
}

// ItemAuthorEmailHasSuffix applies the HasSuffix predicate on the "item_author_email" field.
func ItemAuthorEmailHasSuffix(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldItemAuthorEmail), v))
	})
}

// ItemAuthorEmailIsNil applies the IsNil predicate on the "item_author_email" field.
func ItemAuthorEmailIsNil() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldItemAuthorEmail)))
	})
}

// ItemAuthorEmailNotNil applies the NotNil predicate on the "item_author_email" field.
func ItemAuthorEmailNotNil() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldItemAuthorEmail)))
	})
}

// ItemAuthorEmailEqualFold applies the EqualFold predicate on the "item_author_email" field.
func ItemAuthorEmailEqualFold(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldItemAuthorEmail), v))
	})
}

// ItemAuthorEmailContainsFold applies the ContainsFold predicate on the "item_author_email" field.
func ItemAuthorEmailContainsFold(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldItemAuthorEmail), v))
	})
}

// ItemImageTitleEQ applies the EQ predicate on the "item_image_title" field.
func ItemImageTitleEQ(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemImageTitle), v))
	})
}

// ItemImageTitleNEQ applies the NEQ predicate on the "item_image_title" field.
func ItemImageTitleNEQ(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldItemImageTitle), v))
	})
}

// ItemImageTitleIn applies the In predicate on the "item_image_title" field.
func ItemImageTitleIn(vs ...string) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldItemImageTitle), v...))
	})
}

// ItemImageTitleNotIn applies the NotIn predicate on the "item_image_title" field.
func ItemImageTitleNotIn(vs ...string) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldItemImageTitle), v...))
	})
}

// ItemImageTitleGT applies the GT predicate on the "item_image_title" field.
func ItemImageTitleGT(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldItemImageTitle), v))
	})
}

// ItemImageTitleGTE applies the GTE predicate on the "item_image_title" field.
func ItemImageTitleGTE(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldItemImageTitle), v))
	})
}

// ItemImageTitleLT applies the LT predicate on the "item_image_title" field.
func ItemImageTitleLT(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldItemImageTitle), v))
	})
}

// ItemImageTitleLTE applies the LTE predicate on the "item_image_title" field.
func ItemImageTitleLTE(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldItemImageTitle), v))
	})
}

// ItemImageTitleContains applies the Contains predicate on the "item_image_title" field.
func ItemImageTitleContains(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldItemImageTitle), v))
	})
}

// ItemImageTitleHasPrefix applies the HasPrefix predicate on the "item_image_title" field.
func ItemImageTitleHasPrefix(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldItemImageTitle), v))
	})
}

// ItemImageTitleHasSuffix applies the HasSuffix predicate on the "item_image_title" field.
func ItemImageTitleHasSuffix(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldItemImageTitle), v))
	})
}

// ItemImageTitleIsNil applies the IsNil predicate on the "item_image_title" field.
func ItemImageTitleIsNil() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldItemImageTitle)))
	})
}

// ItemImageTitleNotNil applies the NotNil predicate on the "item_image_title" field.
func ItemImageTitleNotNil() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldItemImageTitle)))
	})
}

// ItemImageTitleEqualFold applies the EqualFold predicate on the "item_image_title" field.
func ItemImageTitleEqualFold(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldItemImageTitle), v))
	})
}

// ItemImageTitleContainsFold applies the ContainsFold predicate on the "item_image_title" field.
func ItemImageTitleContainsFold(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldItemImageTitle), v))
	})
}

// ItemImageURLEQ applies the EQ predicate on the "item_image_url" field.
func ItemImageURLEQ(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemImageURL), v))
	})
}

// ItemImageURLNEQ applies the NEQ predicate on the "item_image_url" field.
func ItemImageURLNEQ(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldItemImageURL), v))
	})
}

// ItemImageURLIn applies the In predicate on the "item_image_url" field.
func ItemImageURLIn(vs ...string) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldItemImageURL), v...))
	})
}

// ItemImageURLNotIn applies the NotIn predicate on the "item_image_url" field.
func ItemImageURLNotIn(vs ...string) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldItemImageURL), v...))
	})
}

// ItemImageURLGT applies the GT predicate on the "item_image_url" field.
func ItemImageURLGT(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldItemImageURL), v))
	})
}

// ItemImageURLGTE applies the GTE predicate on the "item_image_url" field.
func ItemImageURLGTE(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldItemImageURL), v))
	})
}

// ItemImageURLLT applies the LT predicate on the "item_image_url" field.
func ItemImageURLLT(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldItemImageURL), v))
	})
}

// ItemImageURLLTE applies the LTE predicate on the "item_image_url" field.
func ItemImageURLLTE(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldItemImageURL), v))
	})
}

// ItemImageURLContains applies the Contains predicate on the "item_image_url" field.
func ItemImageURLContains(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldItemImageURL), v))
	})
}

// ItemImageURLHasPrefix applies the HasPrefix predicate on the "item_image_url" field.
func ItemImageURLHasPrefix(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldItemImageURL), v))
	})
}

// ItemImageURLHasSuffix applies the HasSuffix predicate on the "item_image_url" field.
func ItemImageURLHasSuffix(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldItemImageURL), v))
	})
}

// ItemImageURLIsNil applies the IsNil predicate on the "item_image_url" field.
func ItemImageURLIsNil() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldItemImageURL)))
	})
}

// ItemImageURLNotNil applies the NotNil predicate on the "item_image_url" field.
func ItemImageURLNotNil() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldItemImageURL)))
	})
}

// ItemImageURLEqualFold applies the EqualFold predicate on the "item_image_url" field.
func ItemImageURLEqualFold(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldItemImageURL), v))
	})
}

// ItemImageURLContainsFold applies the ContainsFold predicate on the "item_image_url" field.
func ItemImageURLContainsFold(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldItemImageURL), v))
	})
}

// ItemCategoriesEQ applies the EQ predicate on the "item_categories" field.
func ItemCategoriesEQ(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemCategories), v))
	})
}

// ItemCategoriesNEQ applies the NEQ predicate on the "item_categories" field.
func ItemCategoriesNEQ(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldItemCategories), v))
	})
}

// ItemCategoriesIn applies the In predicate on the "item_categories" field.
func ItemCategoriesIn(vs ...string) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldItemCategories), v...))
	})
}

// ItemCategoriesNotIn applies the NotIn predicate on the "item_categories" field.
func ItemCategoriesNotIn(vs ...string) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldItemCategories), v...))
	})
}

// ItemCategoriesGT applies the GT predicate on the "item_categories" field.
func ItemCategoriesGT(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldItemCategories), v))
	})
}

// ItemCategoriesGTE applies the GTE predicate on the "item_categories" field.
func ItemCategoriesGTE(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldItemCategories), v))
	})
}

// ItemCategoriesLT applies the LT predicate on the "item_categories" field.
func ItemCategoriesLT(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldItemCategories), v))
	})
}

// ItemCategoriesLTE applies the LTE predicate on the "item_categories" field.
func ItemCategoriesLTE(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldItemCategories), v))
	})
}

// ItemCategoriesContains applies the Contains predicate on the "item_categories" field.
func ItemCategoriesContains(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldItemCategories), v))
	})
}

// ItemCategoriesHasPrefix applies the HasPrefix predicate on the "item_categories" field.
func ItemCategoriesHasPrefix(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldItemCategories), v))
	})
}

// ItemCategoriesHasSuffix applies the HasSuffix predicate on the "item_categories" field.
func ItemCategoriesHasSuffix(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldItemCategories), v))
	})
}

// ItemCategoriesEqualFold applies the EqualFold predicate on the "item_categories" field.
func ItemCategoriesEqualFold(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldItemCategories), v))
	})
}

// ItemCategoriesContainsFold applies the ContainsFold predicate on the "item_categories" field.
func ItemCategoriesContainsFold(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldItemCategories), v))
	})
}

// ItemEnclosuresEQ applies the EQ predicate on the "item_enclosures" field.
func ItemEnclosuresEQ(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemEnclosures), v))
	})
}

// ItemEnclosuresNEQ applies the NEQ predicate on the "item_enclosures" field.
func ItemEnclosuresNEQ(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldItemEnclosures), v))
	})
}

// ItemEnclosuresIn applies the In predicate on the "item_enclosures" field.
func ItemEnclosuresIn(vs ...string) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldItemEnclosures), v...))
	})
}

// ItemEnclosuresNotIn applies the NotIn predicate on the "item_enclosures" field.
func ItemEnclosuresNotIn(vs ...string) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldItemEnclosures), v...))
	})
}

// ItemEnclosuresGT applies the GT predicate on the "item_enclosures" field.
func ItemEnclosuresGT(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldItemEnclosures), v))
	})
}

// ItemEnclosuresGTE applies the GTE predicate on the "item_enclosures" field.
func ItemEnclosuresGTE(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldItemEnclosures), v))
	})
}

// ItemEnclosuresLT applies the LT predicate on the "item_enclosures" field.
func ItemEnclosuresLT(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldItemEnclosures), v))
	})
}

// ItemEnclosuresLTE applies the LTE predicate on the "item_enclosures" field.
func ItemEnclosuresLTE(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldItemEnclosures), v))
	})
}

// ItemEnclosuresContains applies the Contains predicate on the "item_enclosures" field.
func ItemEnclosuresContains(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldItemEnclosures), v))
	})
}

// ItemEnclosuresHasPrefix applies the HasPrefix predicate on the "item_enclosures" field.
func ItemEnclosuresHasPrefix(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldItemEnclosures), v))
	})
}

// ItemEnclosuresHasSuffix applies the HasSuffix predicate on the "item_enclosures" field.
func ItemEnclosuresHasSuffix(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldItemEnclosures), v))
	})
}

// ItemEnclosuresEqualFold applies the EqualFold predicate on the "item_enclosures" field.
func ItemEnclosuresEqualFold(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldItemEnclosures), v))
	})
}

// ItemEnclosuresContainsFold applies the ContainsFold predicate on the "item_enclosures" field.
func ItemEnclosuresContainsFold(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldItemEnclosures), v))
	})
}

// CrawlerTitleEQ applies the EQ predicate on the "crawler_title" field.
func CrawlerTitleEQ(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCrawlerTitle), v))
	})
}

// CrawlerTitleNEQ applies the NEQ predicate on the "crawler_title" field.
func CrawlerTitleNEQ(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCrawlerTitle), v))
	})
}

// CrawlerTitleIn applies the In predicate on the "crawler_title" field.
func CrawlerTitleIn(vs ...string) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCrawlerTitle), v...))
	})
}

// CrawlerTitleNotIn applies the NotIn predicate on the "crawler_title" field.
func CrawlerTitleNotIn(vs ...string) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCrawlerTitle), v...))
	})
}

// CrawlerTitleGT applies the GT predicate on the "crawler_title" field.
func CrawlerTitleGT(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCrawlerTitle), v))
	})
}

// CrawlerTitleGTE applies the GTE predicate on the "crawler_title" field.
func CrawlerTitleGTE(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCrawlerTitle), v))
	})
}

// CrawlerTitleLT applies the LT predicate on the "crawler_title" field.
func CrawlerTitleLT(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCrawlerTitle), v))
	})
}

// CrawlerTitleLTE applies the LTE predicate on the "crawler_title" field.
func CrawlerTitleLTE(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCrawlerTitle), v))
	})
}

// CrawlerTitleContains applies the Contains predicate on the "crawler_title" field.
func CrawlerTitleContains(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCrawlerTitle), v))
	})
}

// CrawlerTitleHasPrefix applies the HasPrefix predicate on the "crawler_title" field.
func CrawlerTitleHasPrefix(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCrawlerTitle), v))
	})
}

// CrawlerTitleHasSuffix applies the HasSuffix predicate on the "crawler_title" field.
func CrawlerTitleHasSuffix(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCrawlerTitle), v))
	})
}

// CrawlerTitleIsNil applies the IsNil predicate on the "crawler_title" field.
func CrawlerTitleIsNil() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCrawlerTitle)))
	})
}

// CrawlerTitleNotNil applies the NotNil predicate on the "crawler_title" field.
func CrawlerTitleNotNil() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCrawlerTitle)))
	})
}

// CrawlerTitleEqualFold applies the EqualFold predicate on the "crawler_title" field.
func CrawlerTitleEqualFold(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCrawlerTitle), v))
	})
}

// CrawlerTitleContainsFold applies the ContainsFold predicate on the "crawler_title" field.
func CrawlerTitleContainsFold(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCrawlerTitle), v))
	})
}

// CrawlerAuthorEQ applies the EQ predicate on the "crawler_author" field.
func CrawlerAuthorEQ(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCrawlerAuthor), v))
	})
}

// CrawlerAuthorNEQ applies the NEQ predicate on the "crawler_author" field.
func CrawlerAuthorNEQ(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCrawlerAuthor), v))
	})
}

// CrawlerAuthorIn applies the In predicate on the "crawler_author" field.
func CrawlerAuthorIn(vs ...string) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCrawlerAuthor), v...))
	})
}

// CrawlerAuthorNotIn applies the NotIn predicate on the "crawler_author" field.
func CrawlerAuthorNotIn(vs ...string) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCrawlerAuthor), v...))
	})
}

// CrawlerAuthorGT applies the GT predicate on the "crawler_author" field.
func CrawlerAuthorGT(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCrawlerAuthor), v))
	})
}

// CrawlerAuthorGTE applies the GTE predicate on the "crawler_author" field.
func CrawlerAuthorGTE(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCrawlerAuthor), v))
	})
}

// CrawlerAuthorLT applies the LT predicate on the "crawler_author" field.
func CrawlerAuthorLT(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCrawlerAuthor), v))
	})
}

// CrawlerAuthorLTE applies the LTE predicate on the "crawler_author" field.
func CrawlerAuthorLTE(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCrawlerAuthor), v))
	})
}

// CrawlerAuthorContains applies the Contains predicate on the "crawler_author" field.
func CrawlerAuthorContains(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCrawlerAuthor), v))
	})
}

// CrawlerAuthorHasPrefix applies the HasPrefix predicate on the "crawler_author" field.
func CrawlerAuthorHasPrefix(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCrawlerAuthor), v))
	})
}

// CrawlerAuthorHasSuffix applies the HasSuffix predicate on the "crawler_author" field.
func CrawlerAuthorHasSuffix(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCrawlerAuthor), v))
	})
}

// CrawlerAuthorIsNil applies the IsNil predicate on the "crawler_author" field.
func CrawlerAuthorIsNil() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCrawlerAuthor)))
	})
}

// CrawlerAuthorNotNil applies the NotNil predicate on the "crawler_author" field.
func CrawlerAuthorNotNil() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCrawlerAuthor)))
	})
}

// CrawlerAuthorEqualFold applies the EqualFold predicate on the "crawler_author" field.
func CrawlerAuthorEqualFold(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCrawlerAuthor), v))
	})
}

// CrawlerAuthorContainsFold applies the ContainsFold predicate on the "crawler_author" field.
func CrawlerAuthorContainsFold(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCrawlerAuthor), v))
	})
}

// CrawlerExcerptEQ applies the EQ predicate on the "crawler_excerpt" field.
func CrawlerExcerptEQ(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCrawlerExcerpt), v))
	})
}

// CrawlerExcerptNEQ applies the NEQ predicate on the "crawler_excerpt" field.
func CrawlerExcerptNEQ(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCrawlerExcerpt), v))
	})
}

// CrawlerExcerptIn applies the In predicate on the "crawler_excerpt" field.
func CrawlerExcerptIn(vs ...string) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCrawlerExcerpt), v...))
	})
}

// CrawlerExcerptNotIn applies the NotIn predicate on the "crawler_excerpt" field.
func CrawlerExcerptNotIn(vs ...string) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCrawlerExcerpt), v...))
	})
}

// CrawlerExcerptGT applies the GT predicate on the "crawler_excerpt" field.
func CrawlerExcerptGT(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCrawlerExcerpt), v))
	})
}

// CrawlerExcerptGTE applies the GTE predicate on the "crawler_excerpt" field.
func CrawlerExcerptGTE(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCrawlerExcerpt), v))
	})
}

// CrawlerExcerptLT applies the LT predicate on the "crawler_excerpt" field.
func CrawlerExcerptLT(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCrawlerExcerpt), v))
	})
}

// CrawlerExcerptLTE applies the LTE predicate on the "crawler_excerpt" field.
func CrawlerExcerptLTE(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCrawlerExcerpt), v))
	})
}

// CrawlerExcerptContains applies the Contains predicate on the "crawler_excerpt" field.
func CrawlerExcerptContains(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCrawlerExcerpt), v))
	})
}

// CrawlerExcerptHasPrefix applies the HasPrefix predicate on the "crawler_excerpt" field.
func CrawlerExcerptHasPrefix(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCrawlerExcerpt), v))
	})
}

// CrawlerExcerptHasSuffix applies the HasSuffix predicate on the "crawler_excerpt" field.
func CrawlerExcerptHasSuffix(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCrawlerExcerpt), v))
	})
}

// CrawlerExcerptIsNil applies the IsNil predicate on the "crawler_excerpt" field.
func CrawlerExcerptIsNil() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCrawlerExcerpt)))
	})
}

// CrawlerExcerptNotNil applies the NotNil predicate on the "crawler_excerpt" field.
func CrawlerExcerptNotNil() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCrawlerExcerpt)))
	})
}

// CrawlerExcerptEqualFold applies the EqualFold predicate on the "crawler_excerpt" field.
func CrawlerExcerptEqualFold(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCrawlerExcerpt), v))
	})
}

// CrawlerExcerptContainsFold applies the ContainsFold predicate on the "crawler_excerpt" field.
func CrawlerExcerptContainsFold(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCrawlerExcerpt), v))
	})
}

// CrawlerSiteNameEQ applies the EQ predicate on the "crawler_site_name" field.
func CrawlerSiteNameEQ(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCrawlerSiteName), v))
	})
}

// CrawlerSiteNameNEQ applies the NEQ predicate on the "crawler_site_name" field.
func CrawlerSiteNameNEQ(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCrawlerSiteName), v))
	})
}

// CrawlerSiteNameIn applies the In predicate on the "crawler_site_name" field.
func CrawlerSiteNameIn(vs ...string) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCrawlerSiteName), v...))
	})
}

// CrawlerSiteNameNotIn applies the NotIn predicate on the "crawler_site_name" field.
func CrawlerSiteNameNotIn(vs ...string) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCrawlerSiteName), v...))
	})
}

// CrawlerSiteNameGT applies the GT predicate on the "crawler_site_name" field.
func CrawlerSiteNameGT(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCrawlerSiteName), v))
	})
}

// CrawlerSiteNameGTE applies the GTE predicate on the "crawler_site_name" field.
func CrawlerSiteNameGTE(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCrawlerSiteName), v))
	})
}

// CrawlerSiteNameLT applies the LT predicate on the "crawler_site_name" field.
func CrawlerSiteNameLT(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCrawlerSiteName), v))
	})
}

// CrawlerSiteNameLTE applies the LTE predicate on the "crawler_site_name" field.
func CrawlerSiteNameLTE(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCrawlerSiteName), v))
	})
}

// CrawlerSiteNameContains applies the Contains predicate on the "crawler_site_name" field.
func CrawlerSiteNameContains(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCrawlerSiteName), v))
	})
}

// CrawlerSiteNameHasPrefix applies the HasPrefix predicate on the "crawler_site_name" field.
func CrawlerSiteNameHasPrefix(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCrawlerSiteName), v))
	})
}

// CrawlerSiteNameHasSuffix applies the HasSuffix predicate on the "crawler_site_name" field.
func CrawlerSiteNameHasSuffix(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCrawlerSiteName), v))
	})
}

// CrawlerSiteNameIsNil applies the IsNil predicate on the "crawler_site_name" field.
func CrawlerSiteNameIsNil() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCrawlerSiteName)))
	})
}

// CrawlerSiteNameNotNil applies the NotNil predicate on the "crawler_site_name" field.
func CrawlerSiteNameNotNil() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCrawlerSiteName)))
	})
}

// CrawlerSiteNameEqualFold applies the EqualFold predicate on the "crawler_site_name" field.
func CrawlerSiteNameEqualFold(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCrawlerSiteName), v))
	})
}

// CrawlerSiteNameContainsFold applies the ContainsFold predicate on the "crawler_site_name" field.
func CrawlerSiteNameContainsFold(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCrawlerSiteName), v))
	})
}

// CrawlerImageEQ applies the EQ predicate on the "crawler_image" field.
func CrawlerImageEQ(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCrawlerImage), v))
	})
}

// CrawlerImageNEQ applies the NEQ predicate on the "crawler_image" field.
func CrawlerImageNEQ(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCrawlerImage), v))
	})
}

// CrawlerImageIn applies the In predicate on the "crawler_image" field.
func CrawlerImageIn(vs ...string) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCrawlerImage), v...))
	})
}

// CrawlerImageNotIn applies the NotIn predicate on the "crawler_image" field.
func CrawlerImageNotIn(vs ...string) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCrawlerImage), v...))
	})
}

// CrawlerImageGT applies the GT predicate on the "crawler_image" field.
func CrawlerImageGT(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCrawlerImage), v))
	})
}

// CrawlerImageGTE applies the GTE predicate on the "crawler_image" field.
func CrawlerImageGTE(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCrawlerImage), v))
	})
}

// CrawlerImageLT applies the LT predicate on the "crawler_image" field.
func CrawlerImageLT(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCrawlerImage), v))
	})
}

// CrawlerImageLTE applies the LTE predicate on the "crawler_image" field.
func CrawlerImageLTE(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCrawlerImage), v))
	})
}

// CrawlerImageContains applies the Contains predicate on the "crawler_image" field.
func CrawlerImageContains(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCrawlerImage), v))
	})
}

// CrawlerImageHasPrefix applies the HasPrefix predicate on the "crawler_image" field.
func CrawlerImageHasPrefix(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCrawlerImage), v))
	})
}

// CrawlerImageHasSuffix applies the HasSuffix predicate on the "crawler_image" field.
func CrawlerImageHasSuffix(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCrawlerImage), v))
	})
}

// CrawlerImageIsNil applies the IsNil predicate on the "crawler_image" field.
func CrawlerImageIsNil() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCrawlerImage)))
	})
}

// CrawlerImageNotNil applies the NotNil predicate on the "crawler_image" field.
func CrawlerImageNotNil() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCrawlerImage)))
	})
}

// CrawlerImageEqualFold applies the EqualFold predicate on the "crawler_image" field.
func CrawlerImageEqualFold(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCrawlerImage), v))
	})
}

// CrawlerImageContainsFold applies the ContainsFold predicate on the "crawler_image" field.
func CrawlerImageContainsFold(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCrawlerImage), v))
	})
}

// CrawlerContentHTMLEQ applies the EQ predicate on the "crawler_content_html" field.
func CrawlerContentHTMLEQ(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCrawlerContentHTML), v))
	})
}

// CrawlerContentHTMLNEQ applies the NEQ predicate on the "crawler_content_html" field.
func CrawlerContentHTMLNEQ(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCrawlerContentHTML), v))
	})
}

// CrawlerContentHTMLIn applies the In predicate on the "crawler_content_html" field.
func CrawlerContentHTMLIn(vs ...string) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCrawlerContentHTML), v...))
	})
}

// CrawlerContentHTMLNotIn applies the NotIn predicate on the "crawler_content_html" field.
func CrawlerContentHTMLNotIn(vs ...string) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCrawlerContentHTML), v...))
	})
}

// CrawlerContentHTMLGT applies the GT predicate on the "crawler_content_html" field.
func CrawlerContentHTMLGT(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCrawlerContentHTML), v))
	})
}

// CrawlerContentHTMLGTE applies the GTE predicate on the "crawler_content_html" field.
func CrawlerContentHTMLGTE(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCrawlerContentHTML), v))
	})
}

// CrawlerContentHTMLLT applies the LT predicate on the "crawler_content_html" field.
func CrawlerContentHTMLLT(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCrawlerContentHTML), v))
	})
}

// CrawlerContentHTMLLTE applies the LTE predicate on the "crawler_content_html" field.
func CrawlerContentHTMLLTE(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCrawlerContentHTML), v))
	})
}

// CrawlerContentHTMLContains applies the Contains predicate on the "crawler_content_html" field.
func CrawlerContentHTMLContains(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCrawlerContentHTML), v))
	})
}

// CrawlerContentHTMLHasPrefix applies the HasPrefix predicate on the "crawler_content_html" field.
func CrawlerContentHTMLHasPrefix(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCrawlerContentHTML), v))
	})
}

// CrawlerContentHTMLHasSuffix applies the HasSuffix predicate on the "crawler_content_html" field.
func CrawlerContentHTMLHasSuffix(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCrawlerContentHTML), v))
	})
}

// CrawlerContentHTMLIsNil applies the IsNil predicate on the "crawler_content_html" field.
func CrawlerContentHTMLIsNil() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCrawlerContentHTML)))
	})
}

// CrawlerContentHTMLNotNil applies the NotNil predicate on the "crawler_content_html" field.
func CrawlerContentHTMLNotNil() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCrawlerContentHTML)))
	})
}

// CrawlerContentHTMLEqualFold applies the EqualFold predicate on the "crawler_content_html" field.
func CrawlerContentHTMLEqualFold(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCrawlerContentHTML), v))
	})
}

// CrawlerContentHTMLContainsFold applies the ContainsFold predicate on the "crawler_content_html" field.
func CrawlerContentHTMLContainsFold(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCrawlerContentHTML), v))
	})
}

// CrawlerContentTextEQ applies the EQ predicate on the "crawler_content_text" field.
func CrawlerContentTextEQ(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCrawlerContentText), v))
	})
}

// CrawlerContentTextNEQ applies the NEQ predicate on the "crawler_content_text" field.
func CrawlerContentTextNEQ(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCrawlerContentText), v))
	})
}

// CrawlerContentTextIn applies the In predicate on the "crawler_content_text" field.
func CrawlerContentTextIn(vs ...string) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCrawlerContentText), v...))
	})
}

// CrawlerContentTextNotIn applies the NotIn predicate on the "crawler_content_text" field.
func CrawlerContentTextNotIn(vs ...string) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCrawlerContentText), v...))
	})
}

// CrawlerContentTextGT applies the GT predicate on the "crawler_content_text" field.
func CrawlerContentTextGT(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCrawlerContentText), v))
	})
}

// CrawlerContentTextGTE applies the GTE predicate on the "crawler_content_text" field.
func CrawlerContentTextGTE(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCrawlerContentText), v))
	})
}

// CrawlerContentTextLT applies the LT predicate on the "crawler_content_text" field.
func CrawlerContentTextLT(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCrawlerContentText), v))
	})
}

// CrawlerContentTextLTE applies the LTE predicate on the "crawler_content_text" field.
func CrawlerContentTextLTE(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCrawlerContentText), v))
	})
}

// CrawlerContentTextContains applies the Contains predicate on the "crawler_content_text" field.
func CrawlerContentTextContains(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCrawlerContentText), v))
	})
}

// CrawlerContentTextHasPrefix applies the HasPrefix predicate on the "crawler_content_text" field.
func CrawlerContentTextHasPrefix(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCrawlerContentText), v))
	})
}

// CrawlerContentTextHasSuffix applies the HasSuffix predicate on the "crawler_content_text" field.
func CrawlerContentTextHasSuffix(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCrawlerContentText), v))
	})
}

// CrawlerContentTextIsNil applies the IsNil predicate on the "crawler_content_text" field.
func CrawlerContentTextIsNil() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCrawlerContentText)))
	})
}

// CrawlerContentTextNotNil applies the NotNil predicate on the "crawler_content_text" field.
func CrawlerContentTextNotNil() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCrawlerContentText)))
	})
}

// CrawlerContentTextEqualFold applies the EqualFold predicate on the "crawler_content_text" field.
func CrawlerContentTextEqualFold(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCrawlerContentText), v))
	})
}

// CrawlerContentTextContainsFold applies the ContainsFold predicate on the "crawler_content_text" field.
func CrawlerContentTextContainsFold(v string) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCrawlerContentText), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Item {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// HasFeed applies the HasEdge predicate on the "feed" edge.
func HasFeed() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FeedTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FeedTable, FeedColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFeedWith applies the HasEdge predicate on the "feed" edge with a given conditions (other predicates).
func HasFeedWith(preds ...predicate.Feed) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FeedInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FeedTable, FeedColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReadByUsers applies the HasEdge predicate on the "read_by_users" edge.
func HasReadByUsers() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReadByUsersTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ReadByUsersTable, ReadByUsersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReadByUsersWith applies the HasEdge predicate on the "read_by_users" edge with a given conditions (other predicates).
func HasReadByUsersWith(preds ...predicate.User) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReadByUsersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ReadByUsersTable, ReadByUsersPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReads applies the HasEdge predicate on the "reads" edge.
func HasReads() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReadsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ReadsTable, ReadsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReadsWith applies the HasEdge predicate on the "reads" edge with a given conditions (other predicates).
func HasReadsWith(preds ...predicate.Read) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReadsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ReadsTable, ReadsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Item) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Item) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Item) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		p(s.Not())
	})
}
